// Automatically generated by Interoptopus.

#ifndef C_GGRS
#define C_GGRS

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>




typedef enum uggrsplayertype
    {
    UGGRSPLAYERTYPE_LOCAL = 0,
    UGGRSPLAYERTYPE_REMOTE = 1,
    UGGRSPLAYERTYPE_SPECTATOR = 2,
    } uggrsplayertype;

typedef enum uggrssessiontype
    {
    UGGRSSESSIONTYPE_P2P = 0,
    UGGRSSESSIONTYPE_SPECTATOR = 1,
    UGGRSSESSIONTYPE_SYNCTEST = 2,
    } uggrssessiontype;

typedef enum uggrssesstionstate
    {
    UGGRSSESSTIONSTATE_SYNCHRONIZING = 0,
    UGGRSSESSTIONSTATE_RUNNING = 1,
    UGGRSSESSTIONSTATE_ERROR = 2,
    } uggrssesstionstate;

typedef struct uggrssessioninfo
    {
    uint32_t player_count;
    uint32_t max_pred_window;
    uint32_t fps;
    uint32_t input_delay;
    uint32_t check_distance;
    uint32_t max_frames_behind;
    uint32_t catchup_speed;
    } uggrssessioninfo;

typedef void (*fptr_fn_pconst_u8)(uint8_t* x0);

typedef bool (*fptr_fn_i32_rval_bool)(int32_t x0);

typedef void (*fptr_fn_pconst_u8_u64)(uint8_t* x0, uint64_t x1);

typedef void (*fptr_fn_pconst_u8_u32_u32)(uint8_t* x0, uint32_t x1, uint32_t x2);

typedef void (*fptr_fn_u32)(uint32_t x0);

typedef struct uggrsbuilder
    {
    uggrssessioninfo info;
    uggrssessiontype sess_type;
    int32_t* session;
    bool session_started;
    } uggrsbuilder;

typedef struct uggrsevents
    {
    fptr_fn_pconst_u8_u32_u32 syncing_event;
    fptr_fn_pconst_u8 synced_event;
    fptr_fn_pconst_u8 disconnected_event;
    fptr_fn_pconst_u8_u64 network_interrupted_event;
    fptr_fn_pconst_u8 network_resumed_event;
    fptr_fn_u32 wait_recommendation_event;
    } uggrsevents;

typedef struct sliceu16
    {
    uint16_t* data;
    uint64_t len;
    } sliceu16;

typedef bool (*fptr_fn_Sliceu16_rval_bool)(sliceu16 x0);

typedef struct uggrsrequests
    {
    fptr_fn_Sliceu16_rval_bool advance_frame;
    fptr_fn_i32_rval_bool load_game_state;
    fptr_fn_i32_rval_bool save_game_state;
    } uggrsrequests;


bool setup_p2p_session(uggrsbuilder* build, uint32_t num_players, uint32_t fps, uint32_t input_delay, uint32_t max_pred);
bool setup_spectator_session(uggrsbuilder* build, uint32_t num_players, uint32_t max_frames_behind, uint32_t catchup_speed);
bool setup_synctest_session(uggrsbuilder* build, uint32_t num_players, uint32_t check_distance, uint32_t input_delay);
bool start_p2p_session(uggrsbuilder* build, uint16_t local_port);
bool start_spectator_session(uggrsbuilder* build, uint8_t* host_addr, uint16_t local_port);
bool start_synctest_session(uggrsbuilder* build);
bool create_session(uggrsbuilder* build);
bool cleanup_session(uggrsbuilder* build);
bool poll_remote_clients(uggrsbuilder* build);
bool add_player(uggrsbuilder* build, uggrsplayertype player_type, uint32_t player_handle, uint8_t* socket_addr);
int32_t frames_ahead(uggrsbuilder* build);
uggrssesstionstate current_state(uggrsbuilder* build);
bool handle_events(uggrsbuilder* build, uggrsevents* callbacks);
bool handle_requests(uggrsbuilder* build, uggrsrequests* callbacks);
bool add_local_input(uggrsbuilder* build, uint32_t player_handle, uint16_t input);

#ifdef __cplusplus
}
#endif

#endif /* C_GGRS */
